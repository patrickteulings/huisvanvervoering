class ElementToggle {
  // Constructor always gets called, pass initial params here
  constructor (_elem) {
    this.elem = _elem;
    this.config = JSON.parse(_elem.dataset.config);
    this.trigger = '';
    this.target = '';
    this.activeClass = this.config.activeClass;
    this.isOpen = false;
    this.initialize();
  }

  initialize () {
    this.isOpen = (this.config.initialState && !this.config.initialState === 'open');
    this.trigger = this.elem.querySelector(this.config.toggleTrigger);
    this.target = this.elem.querySelector(this.config.toggleTarget);

    this.addEvents();
  }

  addEvents () {
    this.trigger.onclick = (e) => this.toggleElement(e);
  }

  toggleElement () {
    if (this.isOpen) {
      this.closeElement();
    } else {
      this.openElement();
    }
  }

  openElement () {
    this.trigger.classList.add('is-open');
    this.target.classList.add('is-open');
    this.isOpen = true;
  }

  closeElement () {
    this.trigger.classList.remove('is-open');
    this.target.classList.remove('is-open');
    this.isOpen = false;
  }
}

const breakpoints = {
  phone: 0,
  tablet: 600,
  tabletWide: 900,
  desktop: 1200,
  desktopWide: 1800,
};

class LatestPosts {
  // Constructor always gets called, pass initial params here
  constructor(_elem) {
    this.elem = _elem;
    this.firstListItem = this.elem.getElementsByTagName("li")[0];
    this.blockTitle = this.elem.querySelector(".block-title");
    this.initialize();
  }

  initialize() {
    this.onResize();
    this.addEvents();
  }

  onResize() {
    this.firstListItem.style.marginLeft = 0;
    let marginLeft = (window.innerWidth - 900) / 2;
    if (window.innerWidth >= breakpoints.tabletWide) {
      this.firstListItem.style.marginLeft = `${
        (window.innerWidth - 900) / 2
      }px`;
    }
    if (window.innerWidth >= breakpoints.desktop) {
      marginLeft = (window.innerWidth - 1058) / 2;
    }
    this.firstListItem.style.marginLeft = `${marginLeft}px`;
    this.blockTitle.style.marginLeft = `${marginLeft}px`;
  }

  addEvents() {
    window.addEventListener("resize", () => this.onResize());
  }
}

const toggles = document.querySelectorAll('[data-module="toggle"]');

for (let toggle of toggles) {
  toggle = new ElementToggle(toggle);
}

const posts = document.querySelector(".hvv.latest-posts");
console.log(posts);
new LatestPosts(posts);

console.log("I AM MAIN.JS");
