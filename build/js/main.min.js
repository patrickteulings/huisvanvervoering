class ElementToggle {
  // Constructor always gets called, pass initial params here
  constructor (_elem) {
    this.elem = _elem;
    this.config = JSON.parse(_elem.dataset.config);
    this.trigger = '';
    this.target = '';
    this.activeClass = this.config.activeClass;
    this.isOpen = false;
    this.initialize();
  }

  initialize () {
    this.isOpen = (this.config.initialState && !this.config.initialState === 'open');
    this.trigger = this.elem.querySelector(this.config.toggleTrigger);
    this.target = this.elem.querySelector(this.config.toggleTarget);

    this.addEvents();
  }

  addEvents () {
    this.trigger.onclick = (e) => this.toggleElement(e);
  }

  toggleElement () {
    if (this.isOpen) {
      this.closeElement();
    } else {
      this.openElement();
    }
  }

  openElement () {
    this.trigger.classList.add('is-open');
    this.target.classList.add('is-open');
    this.isOpen = true;
  }

  closeElement () {
    this.trigger.classList.remove('is-open');
    this.target.classList.remove('is-open');
    this.isOpen = false;
  }
}

const breakpoints = {
  phone: 0,
  tablet: 600,
  tabletWide: 900,
  desktop: 1200,
  desktopWide: 1800,
};

class LatestPosts {
  // Constructor always gets called, pass initial params here
  constructor(_elem) {
    this.elem = _elem;
    this.firstListItem = this.elem.getElementsByTagName("li")[0];
    this.blockTitle = this.elem.querySelector(".block-title");
    this.initialize();
  }

  initialize() {
    this.onResize();
    this.addEvents();
  }

  onResize() {
    this.firstListItem.style.marginLeft = 0;
    let marginLeft = (window.innerWidth - 900) / 2;
    if (window.innerWidth >= breakpoints.tabletWide) {
      this.firstListItem.style.marginLeft = `${
        (window.innerWidth - 900) / 2
      }px`;
    }
    if (window.innerWidth >= breakpoints.desktop) {
      marginLeft = (window.innerWidth - 1058) / 2;
    }
    this.firstListItem.style.marginLeft = `${marginLeft}px`;
    this.blockTitle.style.marginLeft = `${marginLeft}px`;
  }

  addEvents() {
    window.addEventListener("resize", () => this.onResize());
  }
}

/**
 * Use this to share a page on social media, with custom text / urls
 * @todo add LinkedIn
 */

/**
 * Example DOM
 *
 *  <a data-module="socialshare" data-config='{"type":"facebook","customurl":"http://www.prettyurl.com"}'></a>
 */

class SocialShare {
  constructor(_elem) {
    this.elem = _elem;
    this.isOpen = false;
    this.config = JSON.parse(_elem.dataset.config);
    this.trigger = _elem;
    this.url = window.location.href;
    this.type = "facebook";
    this.initialize();
  }

  addEvents() {
    this.trigger.addEventListener("click", (e) => {
      e.preventDefault();
      this.shareElement(e);
    });
  }

  shareElement() {
    let shareURL = "";

    if (this.type === "mailto") {
      window.location = `mailto:?body=` + this.url;
      return false;
    }

    if (this.type === "copy") {
      this.copyToClipBoard();
      return false;
    }

    if (this.type === "twitter") {
      shareURL = "http://twitter.com/share?url=";
    }
    if (this.type === "facebook") {
      shareURL = "https://www.facebook.com/sharer/sharer.php?u=";
    }
    if (this.type === "google-plus") {
      shareURL = "https://plus.google.com/share?url=";
    }
    if (this.type === "whatsapp") {
      shareURL = "https//api.whatsapp.com/send?text=";
    }
    if (this.type === "linkedin") {
      shareURL = "https://www.linkedin.com/sharing/share-offsite/?url=";
    }

    window.open(
      shareURL + this.url,
      this.type.charAt(0).toUpperCase(),
      "height=450, width=550, top=" +
        (window.innerHeight / 2 - 225) +
        ", left=" +
        window.innerWidth / 2 +
        ", toolbar=0, location=0, menubar=0, directories=0, scrollbars=0"
    );
  }

  copyToClipBoard() {
    var share_url = document.querySelector(".socials__url");
    var selection = window.getSelection();
    var range = document.createRange();
    share_url.innerHTML = this.url;
    range.selectNodeContents(document.querySelector(".socials__url"));
    selection.removeAllRanges();
    selection.addRange(range);
    document.execCommand("copy");
    selection.removeAllRanges();

    // Show alert
    var alertElem = document.querySelector(".socials__url--alert");
    alertElem.classList.add("is-visible");

    setTimeout(function () {
      alertElem.classList.remove("is-visible");
    }, 3000);
  }

  initialize() {
    console.log(this.config);
    this.type = this.config.type !== undefined ? this.config.type : this.type;
    this.url =
      this.config.customurl !== undefined ? this.config.customurl : this.url;
    this.addEvents();
  }
}

new Rellax(".rellax");
const toggles = document.querySelectorAll('[data-module="toggle"]');
const shares = document.querySelectorAll('[data-module="share"]');

for (let toggle of toggles) {
  toggle = new ElementToggle(toggle);
}

for (let shareItem of shares) {
  shareItem = new SocialShare(shareItem);
}

const posts = document.querySelector(".hvv.latest-posts");
console.log(posts);
new LatestPosts(posts);

console.log("I AM MAIN.JS BITCH");
